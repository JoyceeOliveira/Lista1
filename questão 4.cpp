/*Questão 4: Se "i" e "j" são variáveis e "p" e "q" ponteiros int. Quais das seguintes expressões de atribuição são ilegais?

#include <stdio.h>

int main(){

 int i, j, *p, *q;
 int a,b;
 
 a=1;
 b=2;

 p= &i;
 q= &j;

 printf(" o endereço de i fica em: %p", p);
 printf("O valor da variável i sendo acessada indiretamente com o ponteiro é: %d", *p);
 printf(" o endereço de j fica em: %p", q);
 printf("O valor da variável j sendo acessada indiretamente com o ponteiro é: %d", *q);

 i = a+b^2;
 j= 7;
 printf("o valor de i: %i", i);
 //ele vai retornar na tela 5

 (....)

 i = *q; 
 printf("o valor de i: %i", i");
 //ele vai retornar na tela 7
 

 return 0;
}


a) p= &i; é verdadeiro, pois é o processo de vinculação do ponteiro p com a variável i

b) *q=&j; é falso, pois estamos vinculando o conteúdo do ponteiro com ele mesmo (valor de j)

c) p = &*&i; é verdadeiro, pois está vinculando o ponteiro p com o endereço do conteúdo do endereço de i

d) i= (*&)j; é falso, pois seria válido apenas se não estivesse com *& entre parênteses"(*&)", sendo assim um erro de digitação

e) i= *&j; é verdadeiro, porém seria mais eficiente e interessante fazer i=j

f) i= &&j; é falso, pois o endereço de uma variável é printada com "%p" enquanto a variável i será printada com "%d"/ou"i". Sendo assim, tipos diferentes causando essa incompatibilidade

g) q = *p; É Falso, pois o endereço do conteúdo é um tipo de variável e o conteúdo da variavel apontada pelo ponteiro é outro

h) i = (*p)++ + *q; É verdadeiro, pois os conteúdos dos ponteiros p e q são do mesmo tipo da variável i e j. Sendo assim, validando essa sentença.
*/
